
services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: app
    ports:
      - "8000:8000"
    env_file: .env
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - API_BASE_URL=${API_BASE_URL}
      - API_VERSION=${API_VERSION}
      - HTTP_REFERER=${HTTP_REFERER}
      - APP_TITLE=${APP_TITLE}
      - LLM_MODEL_NAME=${LLM_MODEL_NAME}
      - LLM_TEMPERATURE=${LLM_TEMPERATURE}
      - LLM_MAX_TOKENS=${LLM_MAX_TOKENS}
      - LLM_RESPONSE_FORMAT=${LLM_RESPONSE_FORMAT}
      - LLM_TIMEOUT=${LLM_TIMEOUT}
    depends_on:
      - db
      - cache

  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: worker
    command: rq worker llm
    ports:
      - "8080-8089:8080"  # Claude health check port range for scaling
    env_file: .env
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - API_BASE_URL=${API_BASE_URL}
      - API_VERSION=${API_VERSION}
      - HTTP_REFERER=${HTTP_REFERER}
      - APP_TITLE=${APP_TITLE}
      - LLM_PROVIDER=${LLM_PROVIDER}
      - LLM_MODEL_NAME=${LLM_MODEL_NAME}
      - LLM_TEMPERATURE=${LLM_TEMPERATURE}
      - LLM_MAX_TOKENS=${LLM_MAX_TOKENS}
      - LLM_RESPONSE_FORMAT=${LLM_RESPONSE_FORMAT}
      - LLM_TIMEOUT=${LLM_TIMEOUT}
      - CLAUDE_QUOTA_RETRY_DELAY=${CLAUDE_QUOTA_RETRY_DELAY}
      - CLAUDE_QUOTA_MAX_DELAY=${CLAUDE_QUOTA_MAX_DELAY}
      - CLAUDE_QUOTA_BACKOFF_MULTIPLIER=${CLAUDE_QUOTA_BACKOFF_MULTIPLIER}
      - CLAUDE_HEALTH_SERVER=true
      - WORKER_COUNT=${WORKER_COUNT}
      - QUEUE_NAME=llm
      - CONTENT_STORE_PATH=${CONTENT_STORE_PATH}
      - CONTENT_STORE_ENABLED=${CONTENT_STORE_ENABLED}
    volumes:
      - claude_config:/root/.config/claude  # Shared Claude authentication
      - haarrrvest_repo:/data-repo  # Mount HAARRRvest repo for content store
    depends_on:
      - db
      - cache
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  recorder:
    build:
      context: .
      dockerfile: Dockerfile
      target: recorder
    env_file: .env
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - OUTPUT_DIR=/app/outputs
    depends_on:
      db:
        condition: service_started
      cache:
        condition: service_started
      haarrrvest-publisher:
        condition: service_healthy
    volumes:
      - ./outputs:/app/outputs
      - ./archives:/app/archives

  scraper:
    build:
      context: .
      dockerfile: Dockerfile
      target: scraper
    command: tail -f /dev/null  # Keep container running
    env_file: .env
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - API_BASE_URL=${API_BASE_URL}
      - API_VERSION=${API_VERSION}
      - HTTP_REFERER=${HTTP_REFERER}
      - APP_TITLE=${APP_TITLE}
      - LLM_MODEL_NAME=${LLM_MODEL_NAME}
      - LLM_TEMPERATURE=${LLM_TEMPERATURE}
      - LLM_MAX_TOKENS=${LLM_MAX_TOKENS}
      - LLM_RESPONSE_FORMAT=${LLM_RESPONSE_FORMAT}
      - LLM_TIMEOUT=${LLM_TIMEOUT}
      - CONTENT_STORE_PATH=${CONTENT_STORE_PATH}
      - CONTENT_STORE_ENABLED=${CONTENT_STORE_ENABLED}
    depends_on:
      - db
      - cache
    volumes:
      - ./docs:/app/docs
      - haarrrvest_repo:/data-repo  # Mount HAARRRvest repo for content store

  reconciler:
    build:
      context: .
      dockerfile: Dockerfile
      target: simple-worker
    command: rq worker reconciler
    env_file: .env
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
    depends_on:
      - db
      - cache

  haarrrvest-publisher:
    build:
      context: .
      dockerfile: Dockerfile
      target: production-base
    command: python -m app.haarrrvest_publisher.service
    env_file: .env
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - OUTPUT_DIR=/app/outputs
      - DATA_REPO_PATH=/data-repo
      - DATA_REPO_URL=${DATA_REPO_URL:-git@github.com:For-The-Greater-Good/HAARRRvest.git}
      - DATA_REPO_TOKEN=${DATA_REPO_TOKEN}
      - PUBLISHER_CHECK_INTERVAL=${PUBLISHER_CHECK_INTERVAL:-300}
      - DAYS_TO_SYNC=${DAYS_TO_SYNC:-7}
      - PUBLISHER_PUSH_ENABLED=${PUBLISHER_PUSH_ENABLED:-false}
    volumes:
      - ./outputs:/app/outputs
      - haarrrvest_repo:/data-repo
      - ./scripts:/app/scripts:ro
    depends_on:
      - db
      - cache
    healthcheck:
      test: ["CMD", "/app/scripts/check-haarrrvest-repo.sh"]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 60s

  db:
    image: postgis/postgis:15-3.3
    env_file: .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  db-init:
    build:
      context: .
      dockerfile: Dockerfile
      target: production-base
    command: /app/scripts/init-database.sh
    env_file: .env
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - DATA_REPO_PATH=/data-repo
      - DB_INIT_DAYS_TO_SYNC=${DB_INIT_DAYS_TO_SYNC:-90}
      - SKIP_DB_INIT=${SKIP_DB_INIT:-false}
    volumes:
      - ./scripts:/app/scripts:ro
      - haarrrvest_repo:/data-repo:ro
    depends_on:
      db:
        condition: service_healthy
      haarrrvest-publisher:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "/app/scripts/wait-for-db-ready.sh", "init"]
      interval: 10s
      timeout: 5s
      retries: 60
      start_period: 30s
    profiles:
      - with-init  # Only runs when explicitly requested

  cache:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  rq-dashboard:
    build:
      context: .
      dockerfile: Dockerfile
      target: simple-worker
    command: rq-dashboard -H cache
    ports:
      - "9181:9181"
    env_file: .env
    environment:
      - REDIS_URL=${REDIS_URL}
    depends_on:
      - cache

  datasette-exporter:
    build:
      context: .
      dockerfile: Dockerfile
      target: datasette-exporter
    env_file: .env
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - OUTPUT_DIR=/data
      - EXPORT_INTERVAL=3600  # Seconds between exports (1 hour default)
    depends_on:
      - db
    volumes:
      - datasette_data:/data
      - ./datasette-metadata.json:/data/metadata.json

  datasette:
    build:
      context: .
      dockerfile: Dockerfile.datasette
    ports:
      - "8001:8001"
    command: [
      "datasette",
      "-p", "8001",
      "-h", "0.0.0.0",
      "--metadata", "/data/metadata.json",
      "--setting", "sql_time_limit_ms", "10000",
      "--setting", "max_returned_rows", "5000",
      "--setting", "allow_download", "1",
      "--setting", "default_page_size", "50",
      "--setting", "base_url", "/",
      "/data/latest.sqlite"
    ]
    volumes:
      - datasette_data:/data
    depends_on:
      - datasette-exporter

  db-backup:
    image: prodrigestivill/postgres-backup-local:15
    env_file: .env
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - SCHEDULE=*/15 * * * *
      - BACKUP_KEEP_DAYS=7
      - BACKUP_KEEP_WEEKS=4
      - BACKUP_KEEP_MONTHS=12
      - HEALTHCHECK_PORT=8080
    volumes:
      - postgres_backups:/backups
    depends_on:
      - db

volumes:
  postgres_data:
  redis_data:
  datasette_data:
  postgres_backups:
  claude_config:  # Shared Claude authentication across worker containers
  haarrrvest_repo:  # HAARRRvest repository managed by publisher service
