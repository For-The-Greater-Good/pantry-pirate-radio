#!/bin/bash
# Pre-commit hook to prevent committing secrets and PII

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Exit on any error
set -e

echo "Running pre-commit security checks..."

# Check for common secret patterns
SECRET_PATTERNS=(
    # API Keys
    "sk-[a-zA-Z0-9]{32,}"
    "api[_-]?key[[:space:]]*[:=][[:space:]]*['\"][^'\"]{20,}"
    "OPENROUTER_API_KEY[[:space:]]*="
    "OPENAI_API_KEY[[:space:]]*="

    # AWS
    "AKIA[0-9A-Z]{16}"
    "aws[_-]?access[_-]?key[_-]?id[[:space:]]*[:=]"
    "aws[_-]?secret[_-]?access[_-]?key[[:space:]]*[:=]"

    # Generic passwords
    "password[[:space:]]*[:=][[:space:]]*['\"][^'\"]{8,}"
    "POSTGRES_PASSWORD[[:space:]]*=[[:space:]]*[^$]"

    # Private keys
    "# Private key pattern - DO NOT COMMIT ACTUAL KEYS"
    "# Private key pattern - DO NOT COMMIT ACTUAL KEYS  "
    "# Private key pattern - DO NOT COMMIT ACTUAL KEYS"
    "-----BEGIN EC PRIVATE KEY-----"
    "-----BEGIN PGP PRIVATE KEY BLOCK-----"
)

# PII patterns to detect in data files
PII_PATTERNS=(
    # Real phone numbers (not 555-xxx-xxxx test format)
    "\([0-9]{3}\)[[:space:]]*[0-9]{3}-[0-9]{4}"
    "[0-9]{3}-[0-9]{3}-[0-9]{4}"
    "\+1[[:space:]]*[0-9]{3}[[:space:]]*[0-9]{3}[[:space:]]*[0-9]{4}"

    # Real email addresses (not example.com or test.com domains)
    "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.(com|org|net|edu|gov|co\.uk|info|biz)"

    # Social Security Numbers
    "[0-9]{3}-[0-9]{2}-[0-9]{4}"
    "[0-9]{9}"

    # Real street addresses with numbers
    "[0-9]+[[:space:]]+[A-Z][a-z]+[[:space:]]+(Street|St|Avenue|Ave|Road|Rd|Boulevard|Blvd|Drive|Dr|Lane|Ln|Way|Place|Pl|Court|Ct)"
)

# Files to check (excluding .env which should be gitignored)
FILES_TO_CHECK=$(git diff --cached --name-only --diff-filter=ACM | grep -vE '(\.env$|\.env\..*$|.*\.pem$|.*\.key$)')

FOUND_SECRETS=0

for file in $FILES_TO_CHECK; do
    if [ -f "$file" ]; then
        for pattern in "${SECRET_PATTERNS[@]}"; do
            if grep -qE "$pattern" "$file"; then
                echo -e "${RED}ERROR: Potential secret found in $file${NC}"
                echo -e "${YELLOW}Pattern matched: $pattern${NC}"
                grep -nE "$pattern" "$file" | head -5
                FOUND_SECRETS=1
            fi
        done
    fi
done

# Check for PII in data files (CSV, JSON, etc.)
echo -e "${BLUE}Checking for PII in data files...${NC}"
DATA_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(csv|json|xml|xlsx|tsv)$' || true)

if [ -n "$DATA_FILES" ]; then
    echo -e "${YELLOW}Found data files to check: $DATA_FILES${NC}"

    for file in $DATA_FILES; do
        if [ -f "$file" ]; then
            echo -e "${BLUE}Checking $file for PII...${NC}"

            # Check for real phone numbers (exclude 555-xxx-xxxx format)
            if grep -qE '\([0-9]{3}\)[[:space:]]*[0-9]{3}-[0-9]{4}' "$file" && ! grep -qE '\(555\)' "$file"; then
                echo -e "${RED}ERROR: Real phone numbers detected in $file${NC}"
                echo -e "${YELLOW}Found non-555 phone numbers that appear to be real${NC}"
                grep -nE '\([0-9]{3}\)[[:space:]]*[0-9]{3}-[0-9]{4}' "$file" | head -3
                FOUND_SECRETS=1
            fi

            if grep -qE '[0-9]{3}-[0-9]{3}-[0-9]{4}' "$file" && ! grep -qE '555-' "$file"; then
                echo -e "${RED}ERROR: Real phone numbers detected in $file${NC}"
                echo -e "${YELLOW}Found non-555 phone numbers that appear to be real${NC}"
                grep -nE '[0-9]{3}-[0-9]{3}-[0-9]{4}' "$file" | head -3
                FOUND_SECRETS=1
            fi

            # Check for real email addresses (exclude example.com/test.com domains)
            if grep -qE '[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.(com|org|net|edu|gov|info|biz)' "$file" && ! grep -qE '@(example\.com|test\.com|localhost)' "$file"; then
                echo -e "${RED}ERROR: Real email addresses detected in $file${NC}"
                echo -e "${YELLOW}Found email addresses that are not example.com/test.com domains${NC}"
                grep -nE '[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.(com|org|net|edu|gov|info|biz)' "$file" | head -3
                FOUND_SECRETS=1
            fi

            # Check for Social Security Numbers
            if grep -qE '[0-9]{3}-[0-9]{2}-[0-9]{4}' "$file"; then
                echo -e "${RED}ERROR: Potential Social Security Numbers detected in $file${NC}"
                echo -e "${YELLOW}Found patterns that look like SSNs${NC}"
                grep -nE '[0-9]{3}-[0-9]{2}-[0-9]{4}' "$file" | head -3
                FOUND_SECRETS=1
            fi

            # Check for real street addresses
            if grep -qE '[0-9]+[[:space:]]+[A-Z][a-z]+[[:space:]]+(Street|St|Avenue|Ave|Road|Rd|Boulevard|Blvd|Drive|Dr|Lane|Ln|Way|Place|Pl|Court|Ct)' "$file"; then
                echo -e "${YELLOW}WARNING: Real street addresses detected in $file${NC}"
                echo -e "${YELLOW}Please verify these are anonymized test addresses${NC}"
                grep -nE '[0-9]+[[:space:]]+[A-Z][a-z]+[[:space:]]+(Street|St|Avenue|Ave|Road|Rd|Boulevard|Blvd|Drive|Dr|Lane|Ln|Way|Place|Pl|Court|Ct)' "$file" | head -3
                # Don't fail on street addresses, just warn
            fi
        fi
    done
fi

# Check if .env is being committed
if git diff --cached --name-only | grep -qE '^\.env$'; then
    echo -e "${RED}ERROR: Attempting to commit .env file!${NC}"
    echo -e "${YELLOW}The .env file should never be committed. It contains secrets.${NC}"
    echo -e "${YELLOW}Use .env.example for documenting environment variables.${NC}"
    FOUND_SECRETS=1
fi

# Check for other sensitive files
SENSITIVE_FILES=(
    "*.pem"
    "*.key"
    "*.p12"
    "*.pfx"
    "id_rsa*"
    "id_dsa*"
    "id_ecdsa*"
    "id_ed25519*"
)

for pattern in "${SENSITIVE_FILES[@]}"; do
    if git diff --cached --name-only | grep -q "$pattern"; then
        echo -e "${RED}ERROR: Attempting to commit sensitive file matching pattern: $pattern${NC}"
        FOUND_SECRETS=1
    fi
done

# Additional security checks for configuration files
echo -e "${BLUE}Checking for hardcoded credentials in configuration files...${NC}"
CONFIG_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(yml|yaml|json|conf|cfg|ini|properties)$' || true)

if [ -n "$CONFIG_FILES" ]; then
    for file in $CONFIG_FILES; do
        if [ -f "$file" ]; then
            # Check for hardcoded database passwords (allow only example values)
            if grep -qE 'password.*=.*[^(pirate|example|test|demo)]' "$file" && ! grep -qE '(\.env|\.example|test|demo)' "$file"; then
                echo -e "${RED}ERROR: Hardcoded password detected in $file${NC}"
                echo -e "${YELLOW}Use environment variables or example values like 'pirate', 'example', 'test'${NC}"
                grep -nE 'password.*=.*[^(pirate|example|test|demo)]' "$file" | head -3
                FOUND_SECRETS=1
            fi

            # Check for hardcoded API keys
            if grep -qE 'key.*=.*[a-zA-Z0-9]{20,}' "$file" && ! grep -qE '(your_api_key_here|example|test|demo)' "$file"; then
                echo -e "${RED}ERROR: Hardcoded API key detected in $file${NC}"
                echo -e "${YELLOW}Use environment variables or placeholder values${NC}"
                grep -nE 'key.*=.*[a-zA-Z0-9]{20,}' "$file" | head -3
                FOUND_SECRETS=1
            fi
        fi
    done
fi

# Check for internal URLs or IP addresses
echo -e "${BLUE}Checking for internal URLs or IP addresses...${NC}"
ALL_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -vE '(\.env$|\.env\..*$|.*\.pem$|.*\.key$|.*\.md$)')

if [ -n "$ALL_FILES" ]; then
    for file in $ALL_FILES; do
        if [ -f "$file" ]; then
            # Check for private IP addresses (excluding localhost and docker defaults)
            if grep -qE '(192\.168\.|10\.|172\.(1[6-9]|2[0-9]|3[01])\.)' "$file" && ! grep -qE '(localhost|127\.0\.0\.1|host\.docker\.internal)' "$file"; then
                echo -e "${YELLOW}WARNING: Private IP address detected in $file${NC}"
                echo -e "${YELLOW}Please verify this is not exposing internal infrastructure${NC}"
                grep -nE '(192\.168\.|10\.|172\.(1[6-9]|2[0-9]|3[01])\.)' "$file" | head -3
                # Don't fail on private IPs, just warn
            fi

            # Check for internal domain names
            if grep -qE 'https?://[a-zA-Z0-9.-]*\.(local|internal|corp|intranet)' "$file"; then
                echo -e "${YELLOW}WARNING: Internal domain detected in $file${NC}"
                echo -e "${YELLOW}Please verify this is not exposing internal infrastructure${NC}"
                grep -nE 'https?://[a-zA-Z0-9.-]*\.(local|internal|corp|intranet)' "$file" | head -3
                # Don't fail on internal domains, just warn
            fi
        fi
    done
fi

if [ $FOUND_SECRETS -eq 1 ]; then
    echo -e "${RED}Pre-commit check failed: Security issues detected!${NC}"
    echo -e "${YELLOW}Please fix the issues above before committing.${NC}"
    echo -e "${YELLOW}Security Guidelines:${NC}"
    echo -e "${YELLOW}  - Use 555-xxx-xxxx format for test phone numbers${NC}"
    echo -e "${YELLOW}  - Use example.com or test.com domains for test emails${NC}"
    echo -e "${YELLOW}  - Use environment variables for real credentials${NC}"
    echo -e "${YELLOW}  - Anonymize all test data${NC}"
    echo -e "${YELLOW}If this is a false positive, you can bypass with: git commit --no-verify${NC}"
    exit 1
fi

echo -e "${GREEN}All pre-commit security checks passed!${NC}"
exit 0