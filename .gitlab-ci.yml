include:
  - template: Security/SAST.gitlab-ci.yml

variables:
  REGISTRY: registry.thehalf.io
  IMAGE_NAME: pantry-pirate-radio
  PYTEST_ARGS: "-v"
  POSTGRES_PASSWORD: pirate
  POSTGRES_DB: pantry_pirate_radio
  DOCKER_TLS_CERTDIR: "/certs"
  PYTHON_IMAGE: python:3.11-slim

default:
  tags:
    - docker
    - amd64
  cache:
    key:
      files:
        - poetry.lock
    paths:
      - .cache/pip
      - .cache/poetry

stages:
  - pre-commit
  - validate
  - test
  - build

.python-setup: &python-setup
  before_script:
    - apt-get update
    - apt-get install -y libpq-dev postgresql-client gcc python3-dev cmake build-essential
    - python -m pip install --upgrade pip
    - pip install poetry
    - poetry config virtualenvs.create false
    - poetry install --no-root

pre-commit-checks:
  stage: pre-commit
  image: $PYTHON_IMAGE
  <<: *python-setup
  script:
    - pip install pre-commit
    - pre-commit run check-yaml --all-files
    - pre-commit run check-toml --all-files
    - pre-commit run check-added-large-files --all-files
    - pre-commit run trailing-whitespace --all-files

format:
  stage: validate
  image: $PYTHON_IMAGE
  <<: *python-setup
  script:
    - poetry run black --check app tests

lint:
  stage: validate
  image: $PYTHON_IMAGE
  <<: *python-setup
  script:
    - poetry run ruff check app tests

type-check:
  stage: validate
  image: $PYTHON_IMAGE
  <<: *python-setup
  script:
    - poetry run mypy app tests

dead-code:
  stage: validate
  image: $PYTHON_IMAGE
  <<: *python-setup
  script:
    - poetry run vulture app tests .vulture_whitelist --min-confidence 80

security-check:
  stage: validate
  image: $PYTHON_IMAGE
  <<: *python-setup
  script:
    - poetry run bandit -r app
    - poetry run safety check
    - poetry run pip-audit

complexity:
  stage: validate
  image: $PYTHON_IMAGE
  <<: *python-setup
  script:
    - poetry run xenon --max-absolute F --max-modules F --max-average E app

.test-setup: &test-setup
  before_script:
    - apt-get update
    - apt-get install -y libpq-dev postgresql-client gcc python3-dev git cmake build-essential
    - git submodule init
    - git submodule update
    - python -m pip install --upgrade pip
    - pip install poetry
    - poetry config virtualenvs.create false
    - poetry install --no-root
    # Wait for database to be ready
    - until pg_isready -h db -p 5432; do echo "Waiting for database..."; sleep 2; done
    # Initialize database with HSDS schema
    - PGPASSWORD=$POSTGRES_PASSWORD psql -h db -U postgres -d $POSTGRES_DB -f docs/HSDS/database/database_postgresql.sql
  services:
    - name: postgis/postgis:15-3.3
      alias: db
    - name: redis:7-alpine
      alias: cache
  variables:
    DATABASE_URL: postgresql+asyncpg://postgres:${POSTGRES_PASSWORD}@db:5432/pantry_pirate_radio
    REDIS_URL: redis://cache:6379/0
    PYTHONPATH: ${CI_PROJECT_DIR}

test:
  stage: test
  image: $PYTHON_IMAGE
  <<: *test-setup
  script:
    - poetry run pytest ${PYTEST_ARGS}

# Generate scraper test jobs
generate-scraper-jobs:
  stage: validate
  image: $PYTHON_IMAGE
  script:
    - apt-get update
    - apt-get install -y python3-yaml
    - mkdir -p ci
    - python scripts/generate_scraper_jobs.py ci/scraper_jobs.yml
  artifacts:
    paths:
      - ci/scraper_jobs.yml
  when: manual

# Test all scrapers at once (in parallel)
test-scrapers:
  stage: test
  image: $PYTHON_IMAGE
  <<: *test-setup
  script:
    - mkdir -p outputs
    - poetry run python -m app.scraper.test_scrapers --all --parallel --max-workers 4 --output outputs/all_scrapers_test.json
  artifacts:
    paths:
      - outputs/all_scrapers_test.json
    expire_in: 1 week
  allow_failure: true
  when: manual

coverage:
  stage: test
  image: $PYTHON_IMAGE
  <<: *test-setup
  script:
    - mkdir -p coverage
    - poetry run pytest -v --cov=app --cov-report=xml:coverage/coverage.xml --cov-report=term --cov-fail-under=90
  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/coverage.xml
    paths:
      - coverage/

sast:
  tags:
    - amd64
  variables:
    SAST_EXCLUDED_PATHS: "tests/, docs/"

build:
  stage: build
  image: docker:20.10-dind
  services:
    - docker:20.10-dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_BUILDKIT: 1
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $REGISTRY
    - docker build -t $REGISTRY/$IMAGE_NAME:$CI_COMMIT_SHA .
    - |
      if [ "$CI_COMMIT_TAG" ]; then
        docker tag $REGISTRY/$IMAGE_NAME:$CI_COMMIT_SHA $REGISTRY/$IMAGE_NAME:$CI_COMMIT_TAG
        docker tag $REGISTRY/$IMAGE_NAME:$CI_COMMIT_SHA $REGISTRY/$IMAGE_NAME:latest
      else
        docker tag $REGISTRY/$IMAGE_NAME:$CI_COMMIT_SHA $REGISTRY/$IMAGE_NAME:dev
      fi
    - docker push $REGISTRY/$IMAGE_NAME:$CI_COMMIT_SHA
    - |
      if [ "$CI_COMMIT_TAG" ]; then
        docker push $REGISTRY/$IMAGE_NAME:$CI_COMMIT_TAG
        docker push $REGISTRY/$IMAGE_NAME:latest
      else
        docker push $REGISTRY/$IMAGE_NAME:dev
      fi
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == "main"
