# Production docker-compose using ghcr.io images
# Usage: docker-compose -f docker-compose.prod.yml up -d
# Set DOCKER_REGISTRY in .env file, e.g.: DOCKER_REGISTRY=ghcr.io/for-the-greater-good/pantry-pirate-radio
# All services now use a single unified image with different commands

services:
  app:
    image: ${DOCKER_REGISTRY:-ghcr.io/for-the-greater-good/pantry-pirate-radio}:${DOCKER_TAG:-latest}
    command: ["app"]
    ports:
      - "8000:8000"
    env_file: ../../.env
    depends_on:
      - db
      - cache
    networks:
      - frontend
      - backend
    volumes:
      - ../../outputs:/app/outputs
      - haarrrvest_repo:/data-repo
      - app_data:/app/data
      - claude_config:/root/.config/claude
    restart: unless-stopped

  worker:
    image: ${DOCKER_REGISTRY:-ghcr.io/for-the-greater-good/pantry-pirate-radio}:${DOCKER_TAG:-latest}
    command: ["worker"]
    ports:
      - "8080-8089:8080"  # Claude health check port range for scaling
    env_file: ../../.env
    networks:
      - backend
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - API_BASE_URL=${API_BASE_URL}
      - API_VERSION=${API_VERSION}
      - HTTP_REFERER=${HTTP_REFERER}
      - APP_TITLE=${APP_TITLE}
      - LLM_PROVIDER=${LLM_PROVIDER}
      - LLM_MODEL_NAME=${LLM_MODEL_NAME}
      - LLM_TEMPERATURE=${LLM_TEMPERATURE}
      - LLM_MAX_TOKENS=${LLM_MAX_TOKENS}
      - LLM_RESPONSE_FORMAT=${LLM_RESPONSE_FORMAT}
      - LLM_TIMEOUT=${LLM_TIMEOUT}
      - CLAUDE_QUOTA_RETRY_DELAY=${CLAUDE_QUOTA_RETRY_DELAY}
      - CLAUDE_QUOTA_MAX_DELAY=${CLAUDE_QUOTA_MAX_DELAY}
      - CLAUDE_QUOTA_BACKOFF_MULTIPLIER=${CLAUDE_QUOTA_BACKOFF_MULTIPLIER}
      - CLAUDE_HEALTH_SERVER=true
    volumes:
      - ../../outputs:/app/outputs
      - haarrrvest_repo:/data-repo
      - app_data:/app/data
      - claude_config:/root/.config/claude  # Shared Claude authentication
    depends_on:
      - db
      - cache

  recorder:
    image: ${DOCKER_REGISTRY:-ghcr.io/for-the-greater-good/pantry-pirate-radio}:${DOCKER_TAG:-latest}
    command: ["recorder"]
    env_file: ../../.env
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - OUTPUT_DIR=/app/outputs
    depends_on:
      - db
      - cache
    networks:
      - backend
    volumes:
      - ../../outputs:/app/outputs
      - ../../archives:/app/archives

  reconciler:
    image: ${DOCKER_REGISTRY:-ghcr.io/for-the-greater-good/pantry-pirate-radio}:${DOCKER_TAG:-latest}
    command: ["reconciler"]
    env_file: ../../.env
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
    volumes:
      - ../../outputs:/app/outputs
      - haarrrvest_repo:/data-repo
      - app_data:/app/data
    depends_on:
      - db
      - cache
    networks:
      - backend

  scraper:
    image: ${DOCKER_REGISTRY:-ghcr.io/for-the-greater-good/pantry-pirate-radio}:${DOCKER_TAG:-latest}
    command: ["scraper"]
    env_file: ../../.env
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - CONTENT_STORE_PATH=${CONTENT_STORE_PATH:-/data-repo}
    volumes:
      - ../../outputs:/app/outputs
      - haarrrvest_repo:/data-repo
      - app_data:/app/data
      - claude_config:/root/.config/claude
    depends_on:
      - db
      - cache
    networks:
      - backend

  validator:
    image: ${DOCKER_REGISTRY:-ghcr.io/for-the-greater-good/pantry-pirate-radio}:${DOCKER_TAG:-latest}
    command: ["validator"]
    env_file: ../../.env
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - LOG_LEVEL=INFO
      - VALIDATOR_LOG_DATA_FLOW=false
      - VALIDATOR_ENRICHMENT_ENABLED=true
      - CONTENT_STORE_PATH=${CONTENT_STORE_PATH:-/data-repo}
    volumes:
      - ../../outputs:/app/outputs
      - haarrrvest_repo:/data-repo
      - app_data:/app/data
      - claude_config:/root/.config/claude
    depends_on:
      - db
      - cache
    networks:
      - backend

  db:
    image: postgis/postgis:15-3.3
    env_file: ../../.env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../../init-scripts:/docker-entrypoint-initdb.d
    networks:
      - backend
    # NO PORTS EXPOSED - access only through Docker network for security

  cache:
    image: redis:7-alpine
    # NO PORTS EXPOSED - access only through Docker network for security
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru --protected-mode no
    volumes:
      - redis_data:/data
    networks:
      - backend

  rq-dashboard:
    image: ${DOCKER_REGISTRY:-ghcr.io/for-the-greater-good/pantry-pirate-radio}:${DOCKER_TAG:-latest}
    command: ["rq-dashboard"]
    # NO PORTS EXPOSED - access via SSH tunnel: ssh -L 9181:rq-dashboard:9181 user@server
    env_file: ../../.env
    environment:
      - REDIS_URL=${REDIS_URL}
    depends_on:
      - cache
    networks:
      - backend

  content-store-dashboard:
    image: ${DOCKER_REGISTRY:-ghcr.io/for-the-greater-good/pantry-pirate-radio}:${DOCKER_TAG:-latest}
    command: ["dashboard"]
    # NO PORTS EXPOSED - access via SSH tunnel: ssh -L 5050:content-store-dashboard:5050 user@server
    env_file: ../../.env
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - DASHBOARD_HOST=0.0.0.0  # Required for container networking
      - DASHBOARD_PORT=5050
    volumes:
      - haarrrvest_repo:/data-repo
      - app_data:/app/data
    depends_on:
      - db
      - cache
    networks:
      - backend

  haarrrvest-publisher:
    image: ${DOCKER_REGISTRY:-ghcr.io/for-the-greater-good/pantry-pirate-radio}:${DOCKER_TAG:-latest}
    command: ["publisher"]
    env_file: ../../.env
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - DATA_REPO_PATH=/data-repo
      - DATA_REPO_URL=${DATA_REPO_URL}
      - DATA_REPO_TOKEN=${DATA_REPO_TOKEN}
      - PUBLISHER_CHECK_INTERVAL=${PUBLISHER_CHECK_INTERVAL:-300}
      - DAYS_TO_SYNC=${DAYS_TO_SYNC:-7}
      - PUBLISHER_PUSH_ENABLED=${PUBLISHER_PUSH_ENABLED:-false}
    volumes:
      - ../../outputs:/app/outputs
      - haarrrvest_repo:/data-repo
      - app_data:/app/data
    depends_on:
      - db
      - cache
    networks:
      - backend

  datasette:
    image: ${DOCKER_REGISTRY:-ghcr.io/for-the-greater-good/pantry-pirate-radio}:datasette-${DOCKER_TAG:-latest}
    ports:
      - "8001:8001"
    command: [
      "datasette",
      "-p", "8001",
      "-h", "0.0.0.0",
      "--metadata", "/data-repo/sqlite/metadata.json",
      "--setting", "sql_time_limit_ms", "10000",
      "--setting", "max_returned_rows", "5000",
      "--setting", "allow_download", "1",
      "--setting", "default_page_size", "50",
      "--setting", "base_url", "/",
      "/data-repo/sqlite/pantry_pirate_radio.sqlite"
    ]
    volumes:
      - haarrrvest_repo:/data-repo:ro
    depends_on:
      - haarrrvest-publisher

  cloudflared:
    image: cloudflare/cloudflared:latest
    command: tunnel --no-autoupdate run --token ${CLOUDFLARE_TUNNEL_TOKEN}
    environment:
      - CLOUDFLARE_TUNNEL_TOKEN=${CLOUDFLARE_TUNNEL_TOKEN}
    networks:
      - frontend
    depends_on:
      - app
      - datasette
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  claude_config:  # Shared Claude authentication across worker containers
  haarrrvest_repo:  # HAARRRvest repository managed by publisher service
  app_data:  # Shared application data across all services

networks:
  frontend:
    # Public-facing network for API and datasette
  backend:
    # Backend network for service communication
    # Services need internet access for GitHub, geocoding APIs, etc.