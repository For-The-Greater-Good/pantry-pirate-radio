name: CD - Build and Push Docker Images

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  release:
    types: [published]
  workflow_dispatch:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches:
      - main

permissions:
  contents: read
  packages: write
  id-token: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }}
    environment: production
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include:
          - target: app
            services: "app"
          - target: worker
            services: "worker"
          - target: recorder
            services: "recorder"
          - target: scraper
            services: "scraper"
          - target: test
            services: "test"
          - target: simple-worker
            services: "reconciler,rq-dashboard"
          - target: production-base
            services: "haarrrvest-publisher,db-init"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate tags for all services
        id: tags
        run: |
          set -euo pipefail  # Exit on error, undefined variables, pipe failures
          
          SERVICES="${{ matrix.services }}"
          TAGS=""
          DATE=$(date +%Y%m%d)
          SHA="${{ github.sha }}"
          
          # Convert image name to lowercase (Docker requirement)
          IMAGE_NAME_LOWER=$(echo "${{ env.IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]')
          
          # Validate services input
          if [[ -z "$SERVICES" ]]; then
            echo "Error: No services defined for target ${{ matrix.target }}"
            exit 1
          fi
          
          # Split services by comma and process each one
          # Using IFS split with proper error handling
          IFS=',' read -ra SERVICE_ARRAY <<< "$SERVICES" || {
            echo "Error: Failed to parse services: $SERVICES"
            exit 1
          }
          
          # Process each service
          for service in "${SERVICE_ARRAY[@]}"; do
            # Validate service name is not empty
            if [[ -z "$service" ]]; then
              echo "Warning: Empty service name found, skipping"
              continue
            fi
            
            # Add tags based on branch/event type
            if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
              TAGS="${TAGS},${{ env.REGISTRY }}/${IMAGE_NAME_LOWER}:${service}-latest"
            fi
            
            # Always add SHA tag for traceability
            TAGS="${TAGS},${{ env.REGISTRY }}/${IMAGE_NAME_LOWER}:${service}-${SHA:0:7}"
            
            # Version tags for releases and tags
            if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
              VERSION="${{ github.ref_name }}"
              TAGS="${TAGS},${{ env.REGISTRY }}/${IMAGE_NAME_LOWER}:${service}-${VERSION}"
            fi
          done
          
          # Add the main :latest tag for app service on main branch
          if [[ "${{ matrix.target }}" == "app" ]] && [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            TAGS="${TAGS},${{ env.REGISTRY }}/${IMAGE_NAME_LOWER}:latest"
          fi
          
          # Remove leading comma if present and validate result
          TAGS="${TAGS#,}"
          if [[ -z "$TAGS" ]]; then
            echo "Error: No tags were generated"
            exit 1
          fi
          
          # Output results
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "Generated tags: ${TAGS}"

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./.docker/images/app/Dockerfile
          target: ${{ matrix.target }}
          platforms: linux/amd64
          push: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') || github.event_name == 'release' }}
          tags: ${{ steps.tags.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ github.ref_name }}
          # Ensure no secrets are passed as build args

  build-datasette:
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }}
    environment: production
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,prefix=datasette-
            type=raw,value=datasette-latest,enable={{is_default_branch}}
            type=raw,value=datasette-{{sha}},enable=true
            type=raw,value=datasette-{{date 'YYYYMMDD'}},enable={{is_default_branch}}

      - name: Build and push Datasette Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./.docker/images/datasette/Dockerfile
          platforms: linux/amd64
          push: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') || github.event_name == 'release' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release:
    needs: [build-and-push, build-datasette]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      packages: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true