name: Sync Repository Settings

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run mode - only show what would be changed'
        required: false
        type: boolean
        default: true
  push:
    branches:
      - main
    paths:
      - '.github/settings.yml'
      - '.github/workflows/sync-repository-settings.yml'

permissions:
  contents: read
  actions: write
  administration: write

jobs:
  sync-settings:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install pyyaml

      - name: Parse settings file
        id: settings
        run: |
          python << 'EOF'
          import yaml
          import json
          import os

          with open('.github/settings.yml', 'r') as f:
              settings = yaml.safe_load(f)

          # Extract repository settings
          repo = settings.get('repository', {})

          # Prepare repository update payload
          repo_update = {
              'name': repo.get('name'),
              'description': repo.get('description', ''),
              'homepage': repo.get('homepage', ''),
              'private': repo.get('private', True),
              'has_issues': repo.get('has_issues', True),
              'has_projects': repo.get('has_projects', True),
              'has_wiki': repo.get('has_wiki', True),
              'has_downloads': repo.get('has_downloads', True),
              'default_branch': repo.get('default_branch', 'main'),
              'allow_squash_merge': repo.get('allow_squash_merge', True),
              'allow_merge_commit': repo.get('allow_merge_commit', True),
              'allow_rebase_merge': repo.get('allow_rebase_merge', True),
              'delete_branch_on_merge': repo.get('delete_branch_on_merge', False),
              'allow_auto_merge': repo.get('allow_auto_merge', False),
              'allow_forking': repo.get('allow_forking', True),
          }

          # Remove None values
          repo_update = {k: v for k, v in repo_update.items() if v is not None}

          # Set outputs
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"repo_update={json.dumps(repo_update)}\n")
              f.write(f"topics={json.dumps(repo.get('topics', '').split(', '))}\n")
              f.write(f"has_labels={json.dumps('labels' in settings)}\n")
              f.write(f"has_branches={json.dumps('branches' in settings)}\n")
          EOF

      - name: Update repository settings
        if: github.event.inputs.dry_run != 'true'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "Updating repository settings..."
          gh api repos/${{ github.repository }} \
            --method PATCH \
            --input - << 'EOF'
          ${{ steps.settings.outputs.repo_update }}
          EOF

      - name: Update repository topics
        if: github.event.inputs.dry_run != 'true'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "Updating repository topics..."
          gh api repos/${{ github.repository }}/topics \
            --method PUT \
            --field names='${{ steps.settings.outputs.topics }}'

      - name: Sync labels
        if: steps.settings.outputs.has_labels == 'true'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          python << 'EOF'
          import yaml
          import json
          import subprocess
          import sys

          dry_run = "${{ github.event.inputs.dry_run }}" == "true"

          with open('.github/settings.yml', 'r') as f:
              settings = yaml.safe_load(f)

          labels = settings.get('labels', [])

          # Get existing labels
          result = subprocess.run(
              ['gh', 'api', f'repos/${{ github.repository }}/labels', '--paginate'],
              capture_output=True, text=True
          )
          existing_labels = json.loads(result.stdout)
          existing_names = {label['name']: label for label in existing_labels}

          for label in labels:
              name = label['name']
              color = label['color'].lstrip('#')
              description = label.get('description', '')

              if name in existing_names:
                  # Update existing label
                  existing = existing_names[name]
                  if existing['color'] != color or existing.get('description', '') != description:
                      if dry_run:
                          print(f"Would update label '{name}' - color: {color}, description: {description}")
                      else:
                          print(f"Updating label '{name}'")
                          subprocess.run([
                              'gh', 'api', f'repos/${{ github.repository }}/labels/{name}',
                              '--method', 'PATCH',
                              '--field', f'color={color}',
                              '--field', f'description={description}'
                          ])
              else:
                  # Create new label
                  if dry_run:
                      print(f"Would create label '{name}' - color: {color}, description: {description}")
                  else:
                      print(f"Creating label '{name}'")
                      subprocess.run([
                          'gh', 'api', f'repos/${{ github.repository }}/labels',
                          '--method', 'POST',
                          '--field', f'name={name}',
                          '--field', f'color={color}',
                          '--field', f'description={description}'
                      ])

          # Optionally remove labels not in settings
          # for name in existing_names:
          #     if not any(label['name'] == name for label in labels):
          #         print(f"Warning: Label '{name}' exists but not in settings.yml")
          EOF

      - name: Configure branch protection
        if: steps.settings.outputs.has_branches == 'true'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          python << 'EOF'
          import yaml
          import json
          import subprocess

          dry_run = "${{ github.event.inputs.dry_run }}" == "true"

          with open('.github/settings.yml', 'r') as f:
              settings = yaml.safe_load(f)

          branches = settings.get('branches', [])

          for branch in branches:
              branch_name = branch['name']
              protection = branch.get('protection', {})

              if not protection:
                  continue

              # Build protection payload
              payload = {
                  'required_status_checks': None,
                  'enforce_admins': protection.get('enforce_admins', False),
                  'required_pull_request_reviews': None,
                  'restrictions': protection.get('restrictions'),
                  'allow_force_pushes': protection.get('allow_force_pushes', False),
                  'allow_deletions': protection.get('allow_deletions', False),
                  'block_creations': protection.get('block_creations', False),
                  'required_conversation_resolution': protection.get('required_conversation_resolution', False),
                  'lock_branch': protection.get('lock_branch', False),
                  'allow_fork_syncing': protection.get('allow_fork_syncing', False)
              }

              # Configure required status checks
              if 'required_status_checks' in protection:
                  rsc = protection['required_status_checks']
                  payload['required_status_checks'] = {
                      'strict': rsc.get('strict', False),
                      'contexts': rsc.get('contexts', [])
                  }

              # Configure required pull request reviews
              if 'required_pull_request_reviews' in protection:
                  rpr = protection['required_pull_request_reviews']
                  payload['required_pull_request_reviews'] = {
                      'required_approving_review_count': rpr.get('required_approving_review_count', 1),
                      'dismiss_stale_reviews': rpr.get('dismiss_stale_reviews', False),
                      'require_code_owner_reviews': rpr.get('require_code_owner_reviews', False),
                      'require_last_push_approval': rpr.get('require_last_push_approval', False)
                  }

                  if 'dismissal_restrictions' in rpr:
                      payload['required_pull_request_reviews']['dismissal_restrictions'] = rpr['dismissal_restrictions']

              if dry_run:
                  print(f"Would update branch protection for '{branch_name}':")
                  print(json.dumps(payload, indent=2))
              else:
                  print(f"Updating branch protection for '{branch_name}'")
                  result = subprocess.run([
                      'gh', 'api', f'repos/${{ github.repository }}/branches/{branch_name}/protection',
                      '--method', 'PUT',
                      '--input', '-'
                  ], input=json.dumps(payload), text=True, capture_output=True)

                  if result.returncode != 0:
                      print(f"Error: {result.stderr}")
                  else:
                      print("Branch protection updated successfully")
          EOF

      - name: Summary
        run: |
          if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            echo "## Dry Run Complete" >> $GITHUB_STEP_SUMMARY
            echo "This was a dry run. No changes were made." >> $GITHUB_STEP_SUMMARY
            echo "To apply changes, run the workflow again with 'Dry run mode' unchecked." >> $GITHUB_STEP_SUMMARY
          else
            echo "## Repository Settings Synchronized" >> $GITHUB_STEP_SUMMARY
            echo "The following settings have been synchronized:" >> $GITHUB_STEP_SUMMARY
            echo "- Repository metadata and features" >> $GITHUB_STEP_SUMMARY
            echo "- Repository topics" >> $GITHUB_STEP_SUMMARY
            if [[ "${{ steps.settings.outputs.has_labels }}" == "true" ]]; then
              echo "- Labels" >> $GITHUB_STEP_SUMMARY
            fi
            if [[ "${{ steps.settings.outputs.has_branches }}" == "true" ]]; then
              echo "- Branch protection rules" >> $GITHUB_STEP_SUMMARY
            fi
          fi