name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  actions: read
  checks: write

env:
  PYTHONPATH: ${{ github.workspace }}
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: pirate
  POSTGRES_DB: pantry_pirate_radio
  DATABASE_URL: postgresql://postgres:pirate@db:5432/pantry_pirate_radio
  REDIS_URL: redis://cache:6379/0
  LLM_PROVIDER: openai
  LLM_MODEL_NAME: google/gemini-2.0-flash-001
  LLM_TEMPERATURE: 0.7
  LLM_MAX_TOKENS: 64768
  LLM_RESPONSE_FORMAT: json_object
  LLM_TIMEOUT: 30
  CI: true  # Skip heavy database initialization

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Generate cache key
        id: cache-key
        run: echo "key=${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}" >> $GITHUB_OUTPUT

  formatting-and-linting:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          poetry config virtualenvs.create false
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi

      - name: Run file checks
        run: |
          # Check YAML files
          find . -name "*.yaml" -o -name "*.yml" | xargs -I {} python -c "import yaml; yaml.safe_load(open('{}'))"
          # Check TOML files
          find . -name "*.toml" | xargs -I {} python -c "import tomllib; tomllib.load(open('{}', 'rb'))"
          # Check for large files (>500KB)
          find . -type f -size +500k -not -path "./.git/*" -not -path "./.*" | head -10
          # Check for trailing whitespace
          find . -name "*.py" -exec grep -l '[[:space:]]$' {} \; | head -10
      - name: Run Black formatter check
        run: poetry run black --check app tests

      - name: Run Ruff linter
        run: poetry run ruff check app tests


  mypy:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          poetry config virtualenvs.create false
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi

      - name: Run MyPy type checker
        run: poetry run mypy app tests

  pytest:
    runs-on: ubuntu-latest
    environment: ci
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and cache test image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .docker/images/app/Dockerfile
          target: test
          tags: pantry-pirate-radio-test:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true

      - name: Create test environment file
        run: |
          # Create .env.test file
          cp .env.example .env.test

          # Remove inline comments that break Pydantic parsing
          sed -i 's/^\(CLAUDE_QUOTA_RETRY_DELAY=\).*/\13600/' .env.test
          sed -i 's/^\(CLAUDE_QUOTA_MAX_DELAY=\).*/\114400/' .env.test
          sed -i 's/^\(CLAUDE_QUOTA_BACKOFF_MULTIPLIER=\).*/\11.5/' .env.test
          sed -i 's/^\(SQL_DUMP_RECORD_COUNT_ALLOW_PERCENTAGE=\).*/\10.9/' .env.test
          sed -i 's/^\(WORKER_COUNT=\).*/\11/' .env.test
          sed -i 's/^\(PUBLISHER_CHECK_INTERVAL=\).*/\1300/' .env.test
          sed -i 's/^\(ERROR_RETRY_DELAY=\).*/\160/' .env.test
          sed -i 's/^\(GIT_USER_EMAIL=\).*/\1pantry-pirate-radio@example.com/' .env.test
          sed -i 's/^\(GIT_USER_NAME=\).*/\1Pantry Pirate Radio Publisher/' .env.test
          sed -i 's/^\(SQL_DUMP_MIN_RECORDS=\).*/\1100/' .env.test
          sed -i 's/^\(SQL_DUMP_RATCHET_PERCENTAGE=\).*/\10.9/' .env.test
          sed -i 's/^\(ALLOW_EMPTY_SQL_DUMP=\).*/\1false/' .env.test
          sed -i 's/^\(OUTPUT_DIR=\).*/\1\/app\/outputs/' .env.test
          sed -i 's/^\(CONTENT_STORE_ENABLED=\).*/\1true/' .env.test

          # Update database password for CI
          sed -i 's/POSTGRES_PASSWORD=.*/POSTGRES_PASSWORD=pirate/' .env.test

          # Set main database URL
          sed -i 's|DATABASE_URL=.*|DATABASE_URL=postgresql+psycopg2://postgres:pirate@db:5432/pantry_pirate_radio|' .env.test

          # Set TEST database URL (different database)
          sed -i 's|TEST_DATABASE_URL=.*|TEST_DATABASE_URL=postgresql+psycopg2://postgres:pirate@db:5432/test_pantry_pirate_radio|' .env.test

          # Set main Redis URL (database 0)
          sed -i 's|REDIS_URL=.*|REDIS_URL=redis://cache:6379/0|' .env.test

          # Set TEST Redis URL (database 1 - MUST be different!)
          sed -i 's|TEST_REDIS_URL=.*|TEST_REDIS_URL=redis://cache:6379/1|' .env.test

          # Set API key from GitHub secret if available
          if [ -n "${{ secrets.OPENROUTER_API_KEY }}" ]; then
            sed -i 's/your_api_key_here/${{ secrets.OPENROUTER_API_KEY }}/' .env.test
          fi

          # Disable HAARRRvest push for tests
          sed -i 's/PUBLISHER_PUSH_ENABLED=.*/PUBLISHER_PUSH_ENABLED=false/' .env.test

          # Also create .env for services
          cp .env.test .env

          # Export POSTGRES_PASSWORD for bouy to use
          echo "POSTGRES_PASSWORD=pirate" >> $GITHUB_ENV

      - name: Run tests
        run: |
          chmod +x ./bouy
          # Run with --programmatic for better CI output
          # The RUNNING_IN_DOCKER=1 env var in bouy will skip bouy tests
          ./bouy --programmatic test --pytest

      - name: Extract coverage data
        run: |
          # Coverage reports are already in the local directory from bouy test
          echo "Coverage reports available:"
          ls -la coverage.* || echo "No coverage files found"

      - name: Display coverage summary
        run: |
          echo "Coverage report generated:"
          if [ -f coverage.xml ]; then
            echo "✅ XML coverage report: coverage.xml"
          fi
          if [ -f coverage.json ]; then
            echo "✅ JSON coverage report: coverage.json"
          fi

      - name: Restore coverage baseline from cache
        uses: actions/cache/restore@v4
        with:
          path: .coverage-baseline
          key: coverage-baseline-${{ github.ref_name }}
          restore-keys: |
            coverage-baseline-main
            coverage-baseline-

      - name: Check coverage ratcheting
        run: |
          # Run coverage check with ratcheting using bouy
          ./bouy test --coverage

      - name: Save coverage baseline to cache
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: actions/cache/save@v4
        with:
          path: .coverage-baseline
          key: coverage-baseline-main-${{ github.run_number }}

      - name: Stop services
        if: always()
        run: ./bouy down

  vulture:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          poetry config virtualenvs.create false
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi

      - name: Run Vulture dead code check
        run: poetry run vulture app tests .vulture_whitelist --min-confidence 80

  bandit:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          poetry config virtualenvs.create false
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi

      - name: Run Bandit security check
        run: poetry run bandit -r app

  safety:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          poetry config virtualenvs.create false
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi

      - name: Run Safety security check
        run: poetry run safety check

  pip-audit:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          poetry config virtualenvs.create false
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi

      - name: Run pip-audit security check
        run: poetry run pip-audit

  xenon:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          poetry config virtualenvs.create false
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi

      - name: Run Xenon complexity check
        run: poetry run xenon --max-absolute F --max-modules F --max-average E app

  bouy-tests:
    needs: setup
    runs-on: ubuntu-latest
    # Run on native Ubuntu without Docker to test bouy functionality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          poetry config virtualenvs.create false

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi

      - name: Install system dependencies
        run: |
          # Docker Compose v2 is included with Docker by default
          docker compose version

          # Install bats for shell tests
          sudo apt-get update
          sudo apt-get install -y bats

      - name: Make scripts executable
        run: |
          chmod +x ./bouy
          chmod +x ./bouy-functions.sh
          chmod +x tests/test_bouy.sh
          chmod +x tests/shell/fixtures/mock_compose.sh

      - name: Test bouy help and version
        run: |
          # Basic functionality tests
          ./bouy --help
          ./bouy --version
          ./bouy --programmatic --help

      - name: Create test environment file
        run: |
          # Create a dummy .env file for bouy tests
          cp .env.example .env
          # Set basic test values
          echo "POSTGRES_PASSWORD=test" >> .env
          echo "DATABASE_URL=postgresql://postgres:test@localhost:5432/test" >> .env
          echo "REDIS_URL=redis://localhost:6379/0" >> .env

      - name: Run bouy unit tests
        run: |
          # Run Python unit tests for bouy functions using isolated runner
          poetry run python run_bouy_tests.py test_bouy_unit.py test_bouy_simplified.py

      - name: Run bouy integration tests
        run: |
          # Run integration tests with mocked docker compose using isolated runner
          poetry run python run_bouy_tests.py test_bouy_integration.py test_bouy_docker.py

      - name: Run bouy shell tests
        run: |
          # Run bash test suite
          ./tests/test_bouy.sh